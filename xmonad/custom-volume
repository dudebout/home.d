#!/usr/bin/env python

import argparse
import logging
import re
import selectors
import subprocess

# Could be used for battery
battery_empty = 0xf008e
battery_ten_percent = 0xf007a
battery_full = 0xf0079
battery_icons = [battery_empty] + [ battery_ten_percent + i for i in range(9)] + [battery_full]

volume_high = 0xf057e
volume_medium = 0xf0580
volume_low = 0xf057f
volume_off = 0xf0e08
volume_icons = [volume_low, volume_medium, volume_high]

rx = re.compile("^Event 'change' on sink #")

def icon_for_volume(volume_percent: Optional[int]) -> str:
    if volume_percent is None:
        result= chr(volume_off)
    else:
        index = max(round(volume / 100 * len(volume_icons)), len(volume_icons))
        result= chr(volume_icons[index])
    return result

def get_volume() -> int:
    output = subprocess.check_output(["pactl", "get-sink-volume", "@DEFAULT_SINK@"], text=True)
    rx = re.compile("(?P<value>\d+)%")
    m = rx.search(output)
    value = int(m["value"])
    return value

def get_mute() -> bool:
    output = subprocess.check_output(["pactl", "get-sink-mute", "@DEFAULT_SINK@"], text=True)
    rx = re.compile("(?P<yes>yes)")
    m = rx.search(output)
    return m is not None

def handle_event(stream):
    event = stream.readline()
    m = rx.search(event)
    if m is None:
        pass
        # logging.warning(f"Ignoring event: {event}")
    else:
        # logging.warning(f"Matching event: {event}")
        print(icon_for_volume(None if get_mute else get_volume()), flush=True)

def pactl_subscribe() -> None:
    p = subprocess.Popen(["pactl", "subscribe"], stdout=subprocess.PIPE, bufsize=1, text=True)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    while p.poll() is None:
        events = selector.select()
        for key, _events in events:
            handle_event(key.fileobj)

def main():
    logging.basicConfig()

    print(icon_for_volume(get_volume()), flush=True)
    pactl_subscribe()

if __name__ == "__main__":
    main()
