#!/usr/bin/env python

import argparse
import logging
import re
import selectors
import subprocess
from pathlib import Path
from typing import Optional

battery_empty = 0xf008e
battery_ten_percent = 0xf007a
battery_full = 0xf0079
battery_icons = [battery_empty] + [ battery_ten_percent + i for i in range(9)] + [battery_full]

volume_high = 0xf057e
volume_medium = 0xf0580
volume_low = 0xf057f
volume_off = 0xf0e08
volume_icons = [volume_low, volume_medium, volume_high]

rx = re.compile("^Event 'change' on sink #")

def _icon_for_volume(volume_percent: Optional[int]) -> str:
    if volume_percent is None:
        result= chr(volume_off)
    else:
        index = min(round(volume_percent / 100 * len(volume_icons)), len(volume_icons) - 1)
        result= chr(volume_icons[index])
    return result

def _get_volume() -> int:
    output = subprocess.check_output(["pactl", "get-sink-volume", "@DEFAULT_SINK@"], text=True)
    rx = re.compile("(?P<value>\d+)%")
    m = rx.search(output)
    value = int(m["value"])
    return value

def _get_mute() -> bool:
    output = subprocess.check_output(["pactl", "get-sink-mute", "@DEFAULT_SINK@"], text=True)
    rx = re.compile("(?P<yes>yes)")
    m = rx.search(output)
    return m is not None

def _emit_volume_status():
    if _get_mute():
        msg = "Mute"
        volume_percent = None
    else:
        volume_percent = _get_volume()
        msg = f"Volume {volume_percent}%"
    logging.info(f"Emitting status for {msg}")
    print(_icon_for_volume(volume_percent), flush=True)

def _handle_event(stream):
    event = stream.readline()
    m = rx.search(event)
    logging.debug(f"Received event: {event.rstrip()}")
    if m is not None:
        _emit_volume_status()

def _pactl_subscribe() -> None:
    p = subprocess.Popen(["pactl", "subscribe"], stdout=subprocess.PIPE, bufsize=1, text=True)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    while p.poll() is None:
        events = selector.select()
        for key, _events in events:
            _handle_event(key.fileobj)

def volume_status():
    _emit_volume_status()
    _pactl_subscribe()

def parse_arguments():
    parser = argparse.ArgumentParser()
    mode_parser = parser.add_mutually_exclusive_group(required=True)
    mode_parser.add_argument("--volume", action="store_true")
    mode_parser.add_argument("--battery", action="store_true")
    log_parser = parser.add_mutually_exclusive_group()
    log_parser.add_argument("--verbose", action="store_true")
    log_parser.add_argument("--debug", action="store_true")
    parser.add_argument("--log-to-file", type=Path)
    return parser.parse_args()


def main():
    args = parse_arguments()
    if args.verbose:
        level = logging.INFO
    elif args.debug:
        level = logging.DEBUG
    else:
        level = logging.WARNING

    if args.log_to_file is not None:
        filename = args.log_to_file
    else:
        filename = None

    logging.basicConfig(level=level, filename=filename)

    if args.volume:
        volume_status()
    else:
        # FIXME implement
        print("battery")


if __name__ == "__main__":
    main()
